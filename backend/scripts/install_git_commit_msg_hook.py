#!/usr/bin/env python3
"""
Installer for Git commit-msg hook that triggers Jira transition to "In Review"
whenever a commit message contains "--issue <ISSUE_KEY>".

This writes .git/hooks/commit-msg (bash script) that calls
backend/tools/jira/hooks/commit_msg_hook.py with the commit message path.

Usage:
  python3 backend/scripts/install_git_commit_msg_hook.py

Notes:
- Non-destructive: will back up an existing commit-msg hook to commit-msg.bak
- Does not require LLMs. Pure scripting + existing Jira REST tool.
"""
from __future__ import annotations

import os
import stat
from pathlib import Path

REPO_ROOT = Path(__file__).resolve().parents[2]
GIT_HOOKS_DIR = REPO_ROOT / ".git" / "hooks"
HOOK_PATH = GIT_HOOKS_DIR / "commit-msg"
BACKUP_PATH = GIT_HOOKS_DIR / "commit-msg.bak"
HOOK_TARGET = REPO_ROOT / "backend" / "tools" / "jira" / "hooks" / "commit_msg_hook.py"

HOOK_SCRIPT = f"""#!/usr/bin/env bash
# Auto-generated by backend/scripts/install_git_commit_msg_hook.py
# Triggers Jira transition based on commit message pattern: --issue <KEY>

set -euo pipefail

# Pick a python interpreter
if command -v python3 >/dev/null 2>&1; then
  PY=python3
elif command -v python >/dev/null 2>&1; then
  PY=python
else
  echo "No python interpreter found; skipping Jira hook" >&2
  exit 0
fi

REPO_ROOT="$(git rev-parse --show-toplevel 2>/dev/null || echo "$(dirname "$0")/../..")"
HOOK_PY="$REPO_ROOT/backend/tools/jira/hooks/commit_msg_hook.py"

# Forward the commit message file path ($1)
"$PY" "$HOOK_PY" "$1" || true
"""


def main() -> int:
    if not (REPO_ROOT / ".git").exists():
        print(f"Error: .git directory not found at {REPO_ROOT}. Run from a Git repo.")
        return 2
    GIT_HOOKS_DIR.mkdir(parents=True, exist_ok=True)

    if HOOK_PATH.exists() and not HOOK_PATH.is_symlink():
        # backup existing hook
        try:
            HOOK_PATH.replace(BACKUP_PATH)
            print(f"Existing commit-msg hook backed up to {BACKUP_PATH}")
        except Exception as e:
            print(f"Warning: could not backup existing hook: {e}")

    try:
        HOOK_PATH.write_text(HOOK_SCRIPT, encoding="utf-8")
        # chmod +x
        mode = HOOK_PATH.stat().st_mode
        HOOK_PATH.chmod(mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)
        print(f"Installed commit-msg hook at {HOOK_PATH}")
    except Exception as e:
        print(f"Failed to write hook: {e}")
        return 1

    if not HOOK_TARGET.exists():
        print(f"Warning: expected hook target not found: {HOOK_TARGET}")
    else:
        print(f"Hook will invoke: {HOOK_TARGET}")

    print("Done. Try committing with a message like: 'feat: X --issue TESTPROJ-16'")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
